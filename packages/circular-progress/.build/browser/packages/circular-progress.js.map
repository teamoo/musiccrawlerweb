{"version":3,"file":"\\packages\\circular-progress.js","sources":["circular-progress/circular_progress.html","circular-progress/circular_progress.js"],"names":[],"mappings":";;;;;;;;;AACA,qD;AACA,kB;AACA,sB;AACA,mB;AACA,yB;AACA,8D;AACA,K;AACA,6B;AACA,iC;AACA,yB;AACA,8D;AACA,K;AACA,gB;AACA,I;;;;;;;;;;;;;;;;;;;ACdA,iD;;AAEA,6B;AACA,sE;AACA,mB;AACA,uB;AACA,iD;AACA,oD;AACA,iD;AACA,uC;AACA,4C;AACA,yE;AACA,oE;AACA,iE;AACA,2E;AACA,2D;AACA,uD;AACA,I;AACA,yB;AACA,qB;AACA,gC;AACA,qD;AACA,4C;AACA,6C;AACA,6D;AACA,gE;AACA,0C;AACA,4C;;AAEA,oF;AACA,gF;;AAEA,kF;;AAEA,8B;;AAEA,wB;AACA,4B;AACA,4B;AACA,+B;AACA,6B;AACA,gC;AACA,8B;AACA,mC;;AAEA,sF;;AAEA,0B;AACA,yC;AACA,yC;AACA,wC;;AAEA,wC;AACA,sD;AACA,uC;AACA,8C;AACA,qD;AACA,oE;;AAEA,2F;;AAEA,oD;AACA,+C;AACA,mE;AACA,gC;AACA,0C;AACA,4B;AACA,Y;AACA,S;AACA,K;;AAEA,sG;;AAEA,6C;AACA,oC;AACA,2B;AACA,wG;AACA,kD;AACA,M;;AAEA,qC;;AAEA,6B;AACA,wD;AACA,mD;AACA,gC;AACA,oC;AACA,qC;AACA,O;;AAEA,+B;;AAEA,6B;AACA,qD;AACA,oD;AACA,qE;AACA,8D;AACA,mD;AACA,8B;AACA,oC;AACA,yD;AACA,yC;AACA,8C;AACA,mC;AACA,U;AACA,O;AACA,C","sourcesContent":["\nTemplate.__define__(\"circularProgress\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(self.lookup(\"outerDivClass\"));\n    }\n  }, \"\\n        \", HTML.DIV({\n    id: \"svg-progress-container\",\n    \"class\": function() {\n      return Spacebars.mustache(self.lookup(\"innerDivClass\"));\n    }\n  }), \"\\n    \");\n}));\n","Template.circularProgress.rendered = function() {\n\n    // parametrizable options\n    // CSS classes used: progress-outer, progress-inner, progress-text\n    if (!this.data)\n        this.data = {} \n    var textPadding = this.data.textPadding || 0;\n    var outerPadding = this.data.outerPadding || 20;\n    var canvasSize = this.data.canvasSize || 300;\n    var spacer = this.data.spacer || 5;\n    var arcWidth = this.data.arcWidth || 10;\n    var sessionValueKey = this.data.sessionValueKey || 'progressPercent';\n    var sessionTextKey = this.data.sessionTextKey || 'progressText';\n    var borderClass = this.data.borderClass || 'progress-border';\n    var progressClass = this.data.progressClass || 'progress-circular-bar';\n    var textClass = this.data.textClass || 'progress-text';\n    var tweenDuration = this.data.tweenDuration || 750;\n    \n    // internal variables\n    var pi = Math.PI;\n    var midPoint = canvasSize/2;\n    var circleRadius = (canvasSize/2) - outerPadding;\n    var outerRadius = circleRadius - spacer;\n    var innerRadius = outerRadius - arcWidth;\n    var center = midPoint.toString()+','+midPoint.toString();\n    var svg = d3.select('#svg-progress-container').append('svg')\n                .attr('width', canvasSize)\n                .attr('height', canvasSize);\n\n    var lineHeight = $('#svg-progress-container').css('line-height').split('px')[0];\n    var fontSize = $('#svg-progress-container').css('font-size').split('px')[0];\n\n    var maxCharCount = Math.floor((2*innerRadius) / (fontSize / 2) - textPadding);\n\n    // append the outer circle\n\n    svg.append('circle')\n        .attr('cx',midPoint)\n        .attr('cy',midPoint)\n        .attr('r',circleRadius)\n        .attr('fill', 'none')\n        .attr('stroke-width', 1)\n        .attr('stroke','#aaa')\n        .attr('class',borderClass);\n\n    // same as above, create the arc without the end angle, since we don't know it yet\n\n    var arc = d3.svg.arc()\n                .innerRadius(innerRadius)\n                .outerRadius(outerRadius)\n                .startAngle(0*(pi/180));\n\n    var progressBar = svg.append('path')\n                        .datum({endAngle: 0*(pi/180)})\n                        .attr('d', arc)\n                        .attr('fill', 'green')\n                        .attr('class', progressClass)\n                        .attr('transform', 'translate('+center+')');\n\n    // function to enable moving the end angle back and forth as needed, using the same arc\n\n    var arcTween = function (transition, newAngle) {\n        transition.attrTween(\"d\", function(d) {\n            var interpolate = d3.interpolate(d.endAngle, newAngle);\n            return function(t) {\n              d.endAngle = interpolate(t);\n              return arc(d);\n          };\n      });\n    }\n\n    // function transform a string into an variable-length array of words, based on a given char count\n\n    var wordWrap = function(str, charCount) {\n        charCount = charCount || 50;\n        cut = cut || false;\n        var regex = '.{1,' +charCount+ '}(\\\\s|$)' + (cut ? '|.{' +charCount+ '}|.+$' : '|\\\\S+?(\\\\s|$)');\n        return str.match(RegExp(regex,'g')) || [];\n    };\n\n    // set up the reactive animation \n\n    Deps.autorun(function() {\n        var percent = Session.get(sessionValueKey) || 0;\n        var radians = (percent/100*360) * (pi/180);\n        progressBar.transition()\n            .duration(tweenDuration)\n            .call(arcTween, radians);\n    });\n\n    // set up the reactive text\n\n    Deps.autorun(function() {\n        var text = Session.get(sessionTextKey) || '';\n        var wrapText = wordWrap(text, maxCharCount);\n        var startPoint = midPoint - (fontSize * wrapText.length / 2);\n        d3.selectAll('#svg-progress-container text').remove();\n        for (var i = 0; i < wrapText.length; i++) {\n            svg.append('text')\n                .attr('x', midPoint)\n                .attr('y', startPoint + (i * lineHeight))\n                .attr('class', textClass)\n                .attr('text-anchor', 'middle')\n                .text(wrapText[i]);\n        };\n    });\n}"]}