{"version":3,"file":"\\packages\\http-methods:tests.js","sources":["http-methods/http.methods.tests.js"],"names":[],"mappings":";;;;;;;;AAAA,uB;AACA,uD;AACA,C;;AAEA,gE;AACA,kG;AACA,oF;AACA,oG;;AAEA,G;;AAEA,sE;AACA,2F;AACA,6F;AACA,6F;AACA,8F;AACA,6F;AACA,4F;AACA,8F;AACA,+F;;AAEA,kH;AACA,mG;AACA,G;;AAEA,2D;AACA,mF;AACA,qF;AACA,sF;AACA,4F;;AAEA,8F;AACA,gG;AACA,8G;AACA,oG;AACA,G;;;AAGA,4D;AACA,uF;AACA,2F;AACA,0G;AACA,kH;AACA,4G;AACA,qH;AACA,0H;AACA,+G;AACA,iH;AACA,G;;AAEA,+D;AACA,wC;AACA,8B;AACA,uC;AACA,qI;;AAEA,8B;AACA,0C;AACA,6I;;AAEA,8B;AACA,gD;AACA,qK;;AAEA,gD;AACA,qK;;AAEA,+C;AACA,mO;;AAEA,oC;AACA,G;;AAEA,yD;AACA,gB;AACA,qF;AACA,uF;;AAEA,uC;AACA,oH;AACA,qH;AACA,2F;AACA,4F;AACA,+F;;AAEA,yC;AACA,oH;;AAEA,I;;AAEA,4C;AACA,4H;;AAEA,kD;AACA,mJ;AACA,4H;;AAEA,G;;AAEA,W;AACA,sB;AACA,qB;AACA,4C;AACA,uB;AACA,oB;AACA,oB;AACA,0B;AACA,gB;AACA,a;AACA,mB;AACA,6B;AACA,0C;AACA,c;AACA,2B;AACA,oB;AACA,c;AACA,gB","sourcesContent":["function equals(a, b) {\n  return !!(EJSON.stringify(a) === EJSON.stringify(b));\n}\n\nTinytest.add('http-methods - test environment', function(test) {\n  test.isTrue(typeof _methodHTTP !== 'undefined', 'test environment not initialized _methodHTTP');\n  test.isTrue(typeof HTTP !== 'undefined', 'test environment not initialized HTTP');\n  test.isTrue(typeof HTTP.methods !== 'undefined', 'test environment not initialized HTTP.methods');\n\n});\n\nTinytest.add('http-methods - nameFollowsConventions', function(test) {\n  test.isFalse(_methodHTTP.nameFollowsConventions(), 'Tested methods naming convention 1');\n  test.isFalse(_methodHTTP.nameFollowsConventions(''), 'Tested methods naming convention 2');\n  test.isFalse(_methodHTTP.nameFollowsConventions({}), 'Tested methods naming convention 3');\n  test.isFalse(_methodHTTP.nameFollowsConventions([1]), 'Tested methods naming convention 4');\n  test.isFalse(_methodHTTP.nameFollowsConventions(-1), 'Tested methods naming convention 5');\n  test.isFalse(_methodHTTP.nameFollowsConventions(1), 'Tested methods naming convention 6');\n  test.isFalse(_methodHTTP.nameFollowsConventions(0.1), 'Tested methods naming convention 7');\n  test.isFalse(_methodHTTP.nameFollowsConventions(-0.1), 'Tested methods naming convention 8');\n\n  test.isTrue(_methodHTTP.nameFollowsConventions('/test/test'), 'Tested methods naming convention leading slash');\n  test.isTrue(_methodHTTP.nameFollowsConventions('test/test'), 'Tested methods naming convention');\n});\n\nTinytest.add('http-methods - getNameList', function(test) {\n  test.equal(EJSON.stringify(_methodHTTP.getNameList()), '[]', 'Name list failed');\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('')), '[]', 'Name list failed');\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('/')), '[]', 'Name list failed');\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('//')), '[\"\",\"\"]', 'Name list failed');\n\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('/1/')), '[\"1\",\"\"]', 'Name list failed');\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('/1/2')), '[\"1\",\"2\"]', 'Name list failed');\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('/1/:name/2')), '[\"1\",\":name\",\"2\"]', 'Name list failed');\n  test.equal(EJSON.stringify(_methodHTTP.getNameList('/1//2')), '[\"1\",\"\",\"2\"]', 'Name list failed');\n});\n\n\nTinytest.add('http-methods - createObject', function(test) {\n  test.equal(EJSON.stringify(_methodHTTP.createObject()), '{}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(2, 4)), '{}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(['foo'], [])), '{\"foo\":\"\"}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(['foo'], ['bar'])), '{\"foo\":\"bar\"}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(['foo'], [3])), '{\"foo\":\"3\"}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(['foo'], ['bar', 3])), '{\"foo\":\"bar\"}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(['foo', 'foo'], ['bar', 3])), '{\"foo\":\"3\"}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject([''], ['bar', 3])), '{\"\":\"bar\"}', 'createObject failed');\n  test.equal(EJSON.stringify(_methodHTTP.createObject(['', ''], ['bar', 3])), '{\"\":\"3\"}', 'createObject failed');\n});\n\nTinytest.add('http-methods - addToMethodTree', function(test) {\n  var original = _methodHTTP.methodTree;\n  _methodHTTP.methodTree = {};\n  _methodHTTP.addToMethodTree('login');\n  test.equal(EJSON.stringify(_methodHTTP.methodTree), '{\"login\":{\":ref\":{\"name\":\"/login/\",\"params\":[]}}}', 'addToMethodTree failed');\n\n  _methodHTTP.methodTree = {};\n  _methodHTTP.addToMethodTree('/foo/bar');\n  test.equal(EJSON.stringify(_methodHTTP.methodTree), '{\"foo\":{\"bar\":{\":ref\":{\"name\":\"/foo/bar/\",\"params\":[]}}}}', 'addToMethodTree failed');\n\n  _methodHTTP.methodTree = {};\n  _methodHTTP.addToMethodTree('/foo/:name/bar');\n  test.equal(EJSON.stringify(_methodHTTP.methodTree), '{\"foo\":{\":value\":{\"bar\":{\":ref\":{\"name\":\"/foo/:value/bar/\",\"params\":[\"name\"]}}}}}', 'addToMethodTree failed');\n\n  _methodHTTP.addToMethodTree('/foo/:name/bar');\n  test.equal(EJSON.stringify(_methodHTTP.methodTree), '{\"foo\":{\":value\":{\"bar\":{\":ref\":{\"name\":\"/foo/:value/bar/\",\"params\":[\"name\"]}}}}}', 'addToMethodTree failed');\n\n  _methodHTTP.addToMethodTree('/foo/name/bar');\n  test.equal(EJSON.stringify(_methodHTTP.methodTree), '{\"foo\":{\":value\":{\"bar\":{\":ref\":{\"name\":\"/foo/:value/bar/\",\"params\":[\"name\"]}}},\"name\":{\"bar\":{\":ref\":{\"name\":\"/foo/name/bar/\",\"params\":[]}}}}}', 'addToMethodTree failed');\n\n  _methodHTTP.methodTree = original;\n});\n\nTinytest.add('http-methods - getMethod', function(test) {\n  // Basic tests\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('')), 'null', 'getMethod failed');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('//')), 'null', 'getMethod failed');\n\n  _methodHTTP.addToMethodTree('login');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login')), '{\"name\":\"/login/\",\"params\":{}}', 'getMethod failed');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('/login')), '{\"name\":\"/login/\",\"params\":{}}', 'getMethod failed');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login/')), 'null', 'getMethod failed');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('/login/')), 'null', 'getMethod failed');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login/test')), 'null', 'getMethod failed');\n\n  _methodHTTP.addToMethodTree('/login/');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login')), '{\"name\":\"/login/\",\"params\":{}}', 'getMethod failed');\n\n  //\n\n  _methodHTTP.addToMethodTree('/login/foo');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login/foo')), '{\"name\":\"/login/foo/\",\"params\":{}}', 'getMethod failed');\n\n  _methodHTTP.addToMethodTree('/login/:name/foo');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login/bar/foo')), '{\"name\":\"/login/:value/foo/\",\"params\":{\"name\":\"bar\"}}', 'getMethod failed');\n  test.equal(EJSON.stringify(_methodHTTP.getMethod('login/foo')), '{\"name\":\"/login/foo/\",\"params\":{}}', 'getMethod failed');\n\n});\n\n//Test API:\n//test.isFalse(v, msg)\n//test.isTrue(v, msg)\n//test.equal(actual, expected, message, not)\n//test.length(obj, len)\n//test.include(s, v)\n//test.isNaN(v, msg)\n//test.isUndefined(v, msg)\n//test.isNotNull\n//test.isNull\n//test.throws(func)\n//test.instanceOf(obj, klass)\n//test.notEqual(actual, expected, message)\n//test.runId()\n//test.exception(exception)\n//test.expect_fail()\n//test.ok(doc)\n//test.fail(doc)\n"]}