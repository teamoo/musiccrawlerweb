{"version":3,"file":"\\packages\\http-publish:tests.js","sources":["http-publish/http.publish.tests.server.js"],"names":[],"mappings":";;;;;;;;AAAA,uB;AACA,uD;AACA,C;;AAEA,yE;AACA,oG;AACA,oF;AACA,oG;AACA,wG;AACA,kH;;AAEA,G;;AAEA,qC;AACA,mD;;AAEA,Y;AACA,sC;AACA,sC;AACA,qC;AACA,G;;AAEA,2B;AACA,6C;AACA,qB;AACA,G;;AAEA,0B;AACA,iE;AACA,qB;AACA,G;;AAEA,gB;AACA,yB;AACA,2C;AACA,oB;AACA,oB;;AAEA,sB;AACA,kC;;AAEA,Y;AACA,oC;;AAEA,6B;AACA,I;AACA,6B;AACA,+C;AACA,yC;AACA,gB;AACA,G;AACA,G;;;AAGA,yE;;AAEA,O;AACA,sE;;AAEA,uG;;AAEA,gB;AACA,2B;AACA,G;;AAEA,G;;;AAGA,wE;;AAEA,0G;;AAEA,mB;AACA,Y;AACA,oC;AACA,uB;AACA,K;AACA,I;AACA,6F;;AAEA,mG;;AAEA,+F;;AAEA,G;;AAEA,yE;;AAEA,kB;AACA,gB;AACA,gB;AACA,e;AACA,oB;AACA,I;;AAEA,wD;;AAEA,sF;;AAEA,sE;AACA,sE;AACA,oE;;AAEA,G;;AAEA,sE;;AAEA,kB;AACA,oB;AACA,gB;AACA,gB;AACA,e;AACA,qB;AACA,mC;AACA,6B;AACA,M;AACA,Y;AACA,oC;AACA,uB;AACA,K;AACA,I;;AAEA,iE;;AAEA,kG;;AAEA,kF;;AAEA,G;;AAEA,W;AACA,sB;AACA,qB;AACA,0C;AACA,uB;AACA,oB;AACA,oB;AACA,0B;AACA,gB;AACA,a;AACA,mB;AACA,6B;AACA,0C;AACA,c;AACA,2B;AACA,oB;AACA,c;AACA,gB;AACA,uB","sourcesContent":["function equals(a, b) {\n  return !!(EJSON.stringify(a) === EJSON.stringify(b));\n}\n\nTinytest.add('http-publish - server - test environment', function(test) {\n  test.isTrue(typeof _publishHTTP !== 'undefined', 'test environment not initialized _publishHTTP');\n  test.isTrue(typeof HTTP !== 'undefined', 'test environment not initialized HTTP');\n  test.isTrue(typeof HTTP.publish !== 'undefined', 'test environment not initialized HTTP.publish');\n  test.isTrue(typeof HTTP.unpublish !== 'undefined', 'test environment not initialized HTTP.unpublish');\n  test.isTrue(typeof HTTP.publishFormats !== 'undefined', 'test environment not initialized HTTP.publishFormats');\n\n});\n\nlist = new Meteor.Collection('list');\nconsole.log('Server url: ' + Meteor.absoluteUrl());\n\nlist.allow({\n  insert: function() { return true; },\n  update: function() { return true; },\n  remove: function() { return true; }\n});\n\nconsole.log('Rig publish');\nHTTP.publish({collection: list}, function() {\n  return list.find();\n});\n\n// Test custom prefix, too\nHTTP.publish({collection: list, name: '/api2/list'}, function() {\n  return list.find();\n});\n\nMeteor.methods({\n  clearTest: function() {\n    console.log('Client called clearTest');\n    // Empty test db\n    list.remove({});\n\n    // Insert one text\n    list.insert({ text: 'OK' });  \n\n    // Count\n    var count = list.find().count();\n\n    return !!(count === 1);  \n  },\n  unmountCustom: function() {\n    console.log('Client called unmountCustom');\n    _publishHTTP.unpublish('/api2/list');\n    return true;\n  }\n});\n\n\nTinytest.add('http-publish - server - getMethodHandler', function(test) {\n\n  try {\n    var methodHandler = _publishHTTP.getMethodHandler(list, 'insert');\n\n    test.isTrue(typeof methodHandler === 'function', 'expected getMethodHandler to return a function');\n\n  } catch(err) {\n    test.fail(err.message);\n  }\n\n});\n\n\nTinytest.add('http-publish - server - formatHandlers', function(test) { \n\n  test.isTrue(typeof _publishHTTP.formatHandlers.json === 'function', 'Cant find formatHandler for json');\n\n  var testScope = {\n    code: 0,\n    setContentType: function(code) {\n      this.code = code;\n    }\n  };\n  var resultFormatHandler = _publishHTTP.formatHandlers.json.apply(testScope, [{test:'ok'}]);\n\n  test.equal(testScope.code, 'application/json', 'json formatHandler have not set setContentType');\n\n  test.equal(resultFormatHandler, '{\"test\":\"ok\"}', 'json formatHandler returned a bad result');\n\n});\n\nTinytest.add('http-publish - server - getPublishScope', function(test) { \n\n  var oldScope = {\n    userId: '1',\n    params: '2',\n    query: '3',\n    oldStuff: 'hmmm'\n  };\n\n  var newScope = _publishHTTP.getPublishScope(oldScope);\n\n  test.isUndefined(newScope.oldStuff, 'This oldStuff should not be in the new scope');\n\n  test.equal(newScope.userId, '1', 'userId not set in the new scope');\n  test.equal(newScope.params, '2', 'params not set in the new scope');\n  test.equal(newScope.query, '3', 'query not set in the new scope');\n\n});\n\nTinytest.add('http-publish - server - formatResult', function(test) { \n\n  var oldScope = {\n    statusCode: 200,\n    userId: '1',\n    params: '2',\n    query: '3',\n    oldStuff: 'hmmm',\n    setStatusCode: function(code) {\n      this.statusCode = code;\n    },\n    code: 0,\n    setContentType: function(code) {\n      this.code = code;\n    }\n  };\n\n  var result = _publishHTTP.formatResult({test: 'ok'}, oldScope);\n\n  test.equal(oldScope.code, 'application/json', 'json formatHandler have not set setContentType');\n\n  test.equal(result, '{\"test\":\"ok\"}', 'json formatHandler returned a bad result');\n\n});\n\n//Test API:\n//test.isFalse(v, msg)\n//test.isTrue(v, msg)\n//test.equalactual, expected, message, not\n//test.length(obj, len)\n//test.include(s, v)\n//test.isNaN(v, msg)\n//test.isUndefined(v, msg)\n//test.isNotNull\n//test.isNull\n//test.throws(func)\n//test.instanceOf(obj, klass)\n//test.notEqual(actual, expected, message)\n//test.runId()\n//test.exception(exception)\n//test.expect_fail()\n//test.ok(doc)\n//test.fail(doc)\n//test.equal(a, b, msg)\n"]}